=Sorting.`*`=
In our sorting, we pass two function as parameters, fn(x) and compare(x, y). We sort the array by comparing each two value resulted from fn(x), where x is an element of array.

==Static==
|| *Call* || *Meaning* ||
|| quickSort(arr, fn, compare) || gets a sorted array by quick sort ||
|| mergeSort(arr, fn, compare) || gets a sorted array by merge sort ||
|| mergeSortBU(arr, fn, compare) || gets a sorted array by Bottom-up merge sort ||

=Sorting.Heap=
Usage of Sorting.`MinHeap` is same as Sorting.`MaxHeap`, except the constructor. Notice, there is a pseudo element at heap`[`0`]` which we might not use.

==Constructor==
|| *Call* || *Meaning* ||
|| Sorting.`MaxHeap`() || gets a new max heap, _new_ is option ||
|| Sorting.`MinHeap`() || gets a new min heap, _new_ is option ||

==Public==
|| *Call* || *Meaning* ||
|| .isEmpty() || returns true if there is no real element in heap ||
|| .push(x) || inserts a element into the heap ||
|| .pop() || gets the max / min element from heap, and remove it, keeping heap sorted ||